#ifndef EHN_PRAC3_H
#define EHN_PRAC3_H

// Common includes
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdbool.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/timeb.h>
#include <ctype.h>
#include <gmp.h>

// Common defines
#define U8 unsigned char


// RC4 functions
/// The struct used to store the current state of the RC4 encryption algorithm.
struct rc4ctx_t
{
    int S[256];
    int i, j;
};


/**
 * Sets up the RC4 algorithm variables using the key and performs the initial permutation.
 * @param rc4i A pointer to the struct that will hold all the state variables for the RC4 algorithm.
 * @param key An array of 8 bit values that represent the key.
 * @param keylen The length of the key in bytes.
 */
void rc4_init(struct rc4ctx_t *rc4i, U8 key[], int keylen);


/**
 * Returns the next byte of the stream cipher that can be used to encrypt a value. Updates the state variables.
 * @param rc4i A pointer to the struct that will hold all the state variables for the RC4 algorithm.
 * @return The byte generated by the RC4 algorithm.
 */
U8 rc4_getbyte(struct rc4ctx_t *rc4i);


// RSA functions
/// The RSA struct to store all the key values.
struct rsactx_t
{
    mpz_t e, d, n;
    mpz_t p, q;
    U8 seed[16];
};


/**
 * Initialises the RSA context.
 * @param rsactx The RSA context struct.
 */
void rsa_init(struct rsactx_t *rsactx);


/**
 * Frees the memory associated with the RSA context.
 * @param rsactx The RSA context struct.
 */
void rsa_clean(struct rsactx_t *rsactx);


// Common functions
/**
 * Swaps the value of the two integer pointers passed as arguments.
 * @param a A pointer to one of the integers to be swapped.
 * @param b A pointer to the other of the integers to be swapped.
 */
void swap(int *a, int *b);


// Convert hex to int, done because the system hex converter is unreliable
int hex_convert(char hex_string[], int length);


// Print a c-string up to a certain length in hex
void print_hex_string(U8 hex_string[], int message_len);


#endif // EHN_PRAC3_H
